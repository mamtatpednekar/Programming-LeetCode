class Solution(object):
    def uniquePathsIII(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        row, col = len(grid), len(grid[0])
        count = sum(row.count(0) for row in grid)
        self.res = 0
        for i in range(row):
            for j in range(col):
                if grid[i][j] == 1:
                    self.dfs(grid, row, col, i, j, count)
        return self.res
                        
    def dfs(self, grid, row, col, i, j, count):
        if 0 <= i < row and 0 <= j < col and grid[i][j] != -1:
            if count == -1 and grid[i][j] == 2:
                self.res += 1
            val = grid[i][j]
            grid[i][j] = -1
            self.dfs(grid, row, col, i+1, j, count-1) 
            self.dfs(grid, row, col, i-1, j, count-1) 
            self.dfs(grid, row, col, i, j+1, count-1) 
            self.dfs(grid, row, col, i, j-1, count-1) 
            grid[i][j] = val
        

        
